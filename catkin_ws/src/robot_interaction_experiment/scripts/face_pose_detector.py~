#!/usr/bin/env python

from __future__ import division
import numpy as np
import facetracker
from experiment.msg import Image
from experiment.msg import Head_Pose
from std_msgs.msg import String
import cv2
import rospy

def face_pose_detector(msg):
    global detected_direction_publisher
    global face_tracker_publisher
    global head_pose_publisher
    
    data = np.fromstring(msg.data, dtype=np.uint8)
    resolution_x = msg.width
    resolution_y = msg.height
    frame = np.reshape(data, (resolution_y, resolution_x, 3))
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    if tracker.update(gray_frame):
        frame = tracker.draw(frame, conns, trigs)
        pitch, yaw, roll = tracker.getOrientation()
        direction = ''
        if yaw < -0.2 or yaw > 0.2:
            direction = 'elsewhere'
        elif pitch > 0.3:
            direction = 'table'
        else:
            direction = 'robot'
        print direction
        detected_direction_publisher.publish(direction)
        head_pose = Head_Pose()
        head_pose.pitch = pitch
        head_pose.yaw = yaw
        head_pose.roll = roll
        head_pose_publisher.publish(head_pose)
        print 'pitch:', pitch, 'yaw:', yaw, 'roll:', roll
    '''
    else:
        print 'Failed tracking face in image'
    '''
    
    image_msg = Image()
    image_msg.data = frame.tostring()
    image_msg.width = msg.width
    image_msg.height = msg.height
    face_tracker_publisher.publish(image_msg)
    
    cv2.imshow('face tracker', frame)
    cv2.waitKey(1)

if __name__ == '__main__':
    conns = facetracker.LoadCon(r'/home/meka/FaceTracker/model/face.con')
    trigs = facetracker.LoadTri(r'/home/meka/FaceTracker/model/face.tri')
    tracker = facetracker.FaceTracker(r'/home/meka/FaceTracker/model/face.tracker')
    
    rospy.init_node('face_pose_detector', anonymous=True)
    rospy.Subscriber('camera_tutor_frames', Image, face_pose_detector, queue_size=1)
    detected_direction_publisher = rospy.Publisher('detected_direction', String)
    face_tracker_publisher = rospy.Publisher('face_tracker', Image)
    head_pose_publisher = rospy.Publisher('head_pose', Head_Pose)
    
    rospy.spin()
    
    #
    # Search for faces in the image
    #
    #tracker.setWindowSizes((11, 9, 7))
